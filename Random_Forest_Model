# Import necessary libraries
import arcpy
import numpy as np
from arcpy.sa import *

# Set environment settings
arcpy.env.overwriteOutput = True

try:
    # Define input parameters
    input_rasters = arcpy.GetParameterAsText(0)  # List of raster layers
    output_raster = arcpy.GetParameterAsText(1)  # Output raster path

    # Check if input parameters are correctly provided
    if not input_rasters or not output_raster:
        raise ValueError("Input parameters are missing. Please check the input parameters and try again.")
    
    arcpy.AddMessage("Input parameters received correctly.")

    # Parse input parameters
    raster_list = input_rasters.split(";")  # Split raster layers

    # Prepare an empty list to hold data for analysis
    raster_arrays = []

    # Loop through each raster and extract pixel values
    for raster in raster_list:
        # Convert raster to numpy array
        raster_array = arcpy.RasterToNumPyArray(raster, nodata_to_value=-9999)

        # Debugging line to check raster shape
        arcpy.AddMessage("Processing raster: {} with shape: {}".format(raster, raster_array.shape))

        # Add to dataset for analysis
        raster_arrays.append(raster_array)

    # Stack all raster arrays to create a 3D array (layers, rows, columns)
    raster_stack = np.stack(raster_arrays)

    # Calculate the majority value for each pixel across all layers
    def majority_vote(stack):
        """Calculate the majority value for each pixel across all layers."""
        unique, counts = np.unique(stack, return_counts=True)
        majority_value = unique[np.argmax(counts)]  # Get the value with the highest count
        return majority_value

    # Apply the majority vote function along the stack (axis=0)
    output_array = np.apply_along_axis(majority_vote, 0, raster_stack)

    # Convert numpy array to raster
    lower_left = arcpy.Point(arcpy.Describe(raster_list[0]).extent.XMin, arcpy.Describe(raster_list[0]).extent.YMin)
    cell_size = arcpy.Describe(raster_list[0]).meanCellWidth
    output_raster_final = arcpy.NumPyArrayToRaster(output_array, lower_left, cell_size, cell_size, value_to_nodata=-9999)

    # Save output raster
    output_raster_final.save(output_raster)

    # Set output parameter
    arcpy.SetParameterAsText(2, output_raster)

    # Print completion message
    arcpy.AddMessage("Random Forest Algorithm run successfully!")
    
except Exception as e:
    # Print error message
    arcpy.AddError("An error occurred: {}".format(str(e)))
    arcpy.AddError("Please check your input parameters and try again.")
